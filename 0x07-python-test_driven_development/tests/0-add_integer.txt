"""
Module Description:
This is the "0-add_integer" module.
The 0-add_integer module supplies one function, add_integer(a, b).

Using add_integer:
To use the add_integer function, first import it from the 0-add_integer module:
>>> from 0-add_integer import add_integer

Module and Function Docstrings Check:
Check if both the module and the function have docstrings
>>> assert __import__("0-add_integer").__doc__ is not None
>>> assert __import__("0-add_integer").add_integer.__doc__ is not None

Various Test Cases for add_integer Function:
Test case 1: Check if add_integer(1, 2) returns 3
>>> add_integer(1, 2)
3

Test case 2: Check if add_integer(1.5, 2) returns 3
>>> add_integer(1.5, 2)
3

Test case 3: Check if add_integer(1, 2.5) returns 3
>>> add_integer(1, 2.5)
3

Test case 4: Check if add_integer(1.5, 2.5) returns 3
>>> add_integer(1.5, 2.5)
3

Test case 5: Check if add_integer(-1, -2) returns -3
>>> add_integer(-1, -2)
-3

Test case 6: Check if TypeError is raised when a is not an integer or float
>>> add_integer("a", 2)
Traceback (most recent call last):
    ...
TypeError: a must be an integer

Test case 7: Check if TypeError is raised when b is not an integer or float
>>> add_integer(1, "b")
Traceback (most recent call last):
    ...
TypeError: b must be an integer

Test case 8: Check if TypeError is raised when both a and b are not integers or floats
>>> add_integer("a", "b")
Traceback (most recent call last):
    ...
TypeError: a must be an integer

Test case 9: Check if TypeError is raised when a is None
>>> add_integer(None, 2)
Traceback (most recent call last):
    ...
TypeError: a must be an integer

Test case 10: Check if TypeError is raised when b is None
>>> add_integer(1, None)
Traceback (most recent call last):
    ...
TypeError: b must be an integer

Test case 11: Check if add_integer(0, 0) returns 0
>>> add_integer(0, 0)
0

Test case 12: Check if add_integer(0, 1) returns 1
>>> add_integer(0, 1)
1

Test case 13: Check if add_integer(1, 0) returns 1
>>> add_integer(1, 0)
1

Test case 14: Check if add_integer(0, -1) returns -1
>>> add_integer(0, -1)
-1

Test case 15: Check if add_integer(-1, 0) returns -1
>>> add_integer(-1, 0)
-1

Test case 16: Check if add_integer(2, -2) returns 0
>>> add_integer(2, -2)
0

Test case 17: Check if add_integer(-2, 2) returns 0
>>> add_integer(-2, 2)
0

Test case 18: Check if TypeError is raised when both a and b are None
>>> add_integer(None, None)
Traceback (most recent call last):
    ...
TypeError: a must be an integer

Test case 19: Check if TypeError is raised when a is a list and b is an integer
>>> add_integer([1], 2)
Traceback (most recent call last):
    ...
TypeError: a must be an integer

Test case 20: Check if TypeError is raised when a is an integer and b is a list
>>> add_integer(1, [2])
Traceback (most recent call last):
    ...
TypeError: b must be an integer
"""
